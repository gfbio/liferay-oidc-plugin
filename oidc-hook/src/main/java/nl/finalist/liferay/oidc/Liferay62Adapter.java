package nl.finalist.liferay.oidc;

import java.util.Calendar;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

import org.gfbio.service.UserGoesternIDLocalServiceUtil;

import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.User;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.service.UserLocalServiceUtil;
import com.liferay.portal.util.PortalUtil;
import com.liferay.util.PwdGenerator;

public class Liferay62Adapter implements LiferayAdapter {

	private static final Log LOG = LogFactoryUtil
			.getLog(Liferay62Adapter.class);

	@Override
	public OIDCConfiguration getOIDCConfiguration(long companyId) {
		return new OpenIDConnectPortalPropsConfiguration(companyId);
	}

	@Override
	public void trace(String s) {
		LOG.trace(s);
	}

	@Override
	public void info(String s) {
		LOG.info(s);
	}

	@Override
	public void debug(String s) {
		LOG.debug(s);
	}

	@Override
	public void warn(String s) {
		LOG.warn(s);
	}

	@Override
	public String getCurrentCompleteURL(HttpServletRequest request) {
		return PortalUtil.getCurrentCompleteURL(request);
	}

	@Override
	public boolean isUserLoggedIn(HttpServletRequest request) {
		try {
			return PortalUtil.getUser(request) != null;
		} catch (PortalException | SystemException e) {
			return false;
		}
	}

	@Override
	public long getCompanyId(HttpServletRequest request) {
		return PortalUtil.getCompanyId(request);
	}

	@Override
	public void error(String s) {
		LOG.error(s);
	}

	@Override
	public String createOrUpdateUser(long companyId, String emailAddress,
			String firstName, String lastName, String goesternId) {

		User user = null;
		try {
			long userId = UserGoesternIDLocalServiceUtil
					.getUserIdByGoesternID(goesternId);

			// Mapping Entry Check UserId <-> GoesternId
			if (userId > 0) {
				user = UserLocalServiceUtil.fetchUser(userId);
			} else {
				user = UserLocalServiceUtil.fetchUserByEmailAddress(companyId,
						emailAddress);
			}

			// Existence Check for User Object
			if (user == null) {
				LOG.debug("Oh no, it is not possible to find user by email address ("
						+ emailAddress
						+ ") or goestern id ("
						+ goesternId
						+ ").");
				LOG.debug("So,... lets create a new user!");
				user = addUser(companyId, emailAddress, firstName, lastName);
			} else {
				LOG.debug("Congrats! There is already a user. Just update the information.");
				updateUser(user, firstName, lastName, emailAddress);
			}

			UserGoesternIDLocalServiceUtil.updateUserGoesternID(
					user.getUserId(), goesternId);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return String.valueOf(user.getUserId());
	}

	// Copied from OpenSSOAutoLogin.java
	protected User addUser(long companyId, String emailAddress,
			String firstName, String lastName) throws SystemException,
			PortalException {

		Locale locale = LocaleUtil.getMostRelevantLocale();
		long creatorUserId = 0;
		boolean autoPassword = false;
		String password1 = PwdGenerator.getPassword();
		String password2 = password1;
		boolean autoScreenName = true;
		String screenName = "not_used_but_autogenerated_instead";
		long facebookId = 0;
		String openId = StringPool.BLANK;
		String middleName = StringPool.BLANK;
		int prefixId = 0;
		int suffixId = 0;
		boolean male = true;
		int birthdayMonth = Calendar.JANUARY;
		int birthdayDay = 1;
		int birthdayYear = 1970;
		String jobTitle = StringPool.BLANK;
		long[] groupIds = null;
		long[] organizationIds = null;
		long[] roleIds = null;
		long[] userGroupIds = null;
		boolean sendEmail = false;
		ServiceContext serviceContext = new ServiceContext();

		User user = UserLocalServiceUtil.addUser(creatorUserId, companyId,
				autoPassword, password1, password2, autoScreenName, screenName,
				emailAddress, facebookId, openId, locale, firstName,
				middleName, lastName, prefixId, suffixId, male, birthdayMonth,
				birthdayDay, birthdayYear, jobTitle, groupIds, organizationIds,
				roleIds, userGroupIds, sendEmail, serviceContext);

		// No password
		user.setPasswordReset(false);
		// No reminder query at first login.
		user.setReminderQueryQuestion("x");
		user.setReminderQueryAnswer("y");
		UserLocalServiceUtil.updateUser(user);
		return user;
	}

	private void updateUser(User user, String firstName, String lastName,
			String emailAddress) {
		user.setFirstName(firstName);
		user.setLastName(lastName);
		user.setEmailAddress(emailAddress);
		try {
			UserLocalServiceUtil.updateUser(user);
		} catch (SystemException e) {
			LOG.error("Could not update user with new name attributes", e);
		}
	}
}